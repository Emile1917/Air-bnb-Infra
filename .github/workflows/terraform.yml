# This workflow installs the latest version of Terraform CLI
# On pull request events, this workflow will run `terraform init`, `terraform fmt`, and `terraform plan`. 
# On push events to the "master" branch, `terraform apply` will be executed.

name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets. AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    runs-on: ubuntu-latest
    environment: production
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init  -backend-config="bucket=${{vars.AWS_S3_BACKEND_BUCKET}}" -backend-config="key=${{vars.AWS_S3_BACKEND_KEY}}" -backend-config="use_lockfile=${{vars.AWS_BACKEND_LOCKFILE_USAGE}}" -backend-config="encrypt=${{vars.AWS_S3_BACKEND_ENCRYPTION}}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

     # On push to "main", build or change infrastructure according to Terraform configuration files
    
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false

